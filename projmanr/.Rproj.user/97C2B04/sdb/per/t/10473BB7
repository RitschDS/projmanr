{
    "collab_server" : "",
    "contents" : "library(R6)\nlibrary(hash)\nlibrary(plotly)\n\n# Class Defintion ---------------------------------------------------------\n\n\nTask <- R6Class(\"Task\",\n                public = list(\n                  id = NULL,\n                  name = NULL,\n                  duration = NULL,\n                  predecessor_id = NULL,\n                  successor_id = NULL,\n                  early_start = NULL,\n                  early_finish = NULL,\n                  late_start = NULL,\n                  late_finish = NULL,\n                  slack = NULL,\n                  is_critical = NULL,\n                  start_date = NULL,\n                  initialize = function(id = NA, name = NA, duration = NA, predecessor_id = NA){\n                    self$id <- to_id(id)\n                    self$name <- name\n                    self$duration <- as.numeric(duration)\n                    self$predecessor_id <- proc_ids(predecessor_id)\n                    self$successor_id <- NULL\n                    self$early_start <- 0\n                    self$early_finish <- 0\n                    self$late_start <- 0\n                    self$late_finish <- 0\n                    self$slack <- 0\n                  }\n                )\n)\n\n\n# Functions ---------------------------------------------------------------\n\n\n# Function to handle reading of processor ids\nproc_ids <- function(ids){\n  ids <- strsplit(ids, \",\")\n  ids <- lapply(ids, trimws)\n  ids <- ids[[1]][ids[[1]] != \"\"]\n  return(lapply(ids, to_id))\n}\n\n# Function to Convert input to R6 class\nread_func <- function(x){\n  id <- x[1]\n  name <- x[2]\n  duration <- x[3]\n  pred_id <- x[4]\n  new_Task <- Task$new(id, name, duration, pred_id)\n}\n\n# Convert numeric to id usable by the hash map\nto_id <- function(id){\n  if(is.character(id)){\n    return(sprintf(\"id%s\", id))\n  }else{\n    return(sprintf(\"id%d\", id))\n  }\n}\n\n# Gets the successor for an activity\nget_successor <- function(task, full_tasks){\n  ret_ids <- NULL\n  task_id <- task$id\n  for(cur_task in full_tasks){\n    if(task_id %in% cur_task$predecessor_id){\n      ret_ids <- c(ret_ids, cur_task$id)\n    }\n  }\n  task$successor_id <- ret_ids\n  return(NULL)\n}\n\n# Function to walk ahead\nwalk_ahead <- function(tasks, map){\n\n  number_activities <- length(tasks)\n\n  for(i in 1:number_activities){\n    current_task <- tasks[[i]]\n    if(length(tasks[[i]]$predecessor_id) == 0){\n      tasks[[i]]$early_finish <- tasks[[i]]$early_start + tasks[[i]]$duration\n      tasks[[i]]$start_date <- Sys.Date()\n    }else{\n      for(id in current_task$predecessor_id){\n        exp <- sprintf(\"map$%s\", id)\n        pred_task <- eval(parse(text = exp))\n        if(current_task$early_start < pred_task$early_finish){\n          current_task$early_start <- pred_task$early_finish\n          current_task$start_date <- pred_task$start_date + pred_task$duration\n        }\n      }\n    }\n    current_task$early_finish <- current_task$early_start + current_task$duration\n  }\n}\n\n# Function to walk back\nwalk_back <- function(tasks, map){\n  number_activities <- length(tasks)\n\n  tasks[[number_activities]]$late_finish <- tasks[[number_activities]]$early_finish\n\n  for(i in number_activities:1){\n    current_task <- tasks[[i]]\n    for(id in current_task$successor_id){\n      exp <- sprintf(\"map$%s\", id)\n      succ_task <- eval(parse(text = exp))\n      if(current_task$late_finish == 0){\n        current_task$late_finish <- succ_task$late_start\n      }else{\n        if(current_task$late_finish > succ_task$late_start){\n          current_task$late_finish <- succ_task$late_start\n        }\n      }\n    }\n    current_task$late_start <- current_task$late_finish - current_task$duration\n  }\n}\n\n# Calculate the critical path\ncritical_path <- function(tasks){\n  c_path <- NULL\n\n  for(task in tasks){\n    if(task$early_finish == task$late_finish && task$early_start == task$late_start){\n      c_path <- c(c_path, gsub(\"id\", \"\", task$id))\n      task$is_critical <- TRUE\n    }else{\n      task$is_critical <- FALSE\n    }\n  }\n\n  return(c_path)\n}\n\n# Converts result to data frame for gantt chart\nto_data_frame <- function(tasks){\n  df <- data.frame(id <- character(),\n                       name <- character(),\n                       start_date <- double(),\n                       duration <- double(),\n                       is_critical <- logical())\n\n  for(task in tasks){\n    df <- rbind(df, data.frame(id <- task$id,\n                               name <- task$name,\n                               start_date <- task$start_date,\n                               duration <- task$duration,\n                               is_critical <- task$is_critical))\n  }\n  colnames(df) <- c(\"id\", \"name\", \"start_date\", \"duration\", \"is_critical\")\n  return(df)\n}\n\n# Produce a gantt chart\ngantt <- function(df){\n  # Get dates in expected format\n  df$start_date <- as.Date(df$start_date, format = \"%m/%d/%Y\")\n  df$color <- \" \"\n  # Assign colors based on critical path\n  for(i in 1:nrow(df)){\n    if(df$is_critical[i] == TRUE){\n      df$color[i] <- \"#f4424b\"\n    }else{\n      df$color[i] <- \"#41a9f4\"\n    }\n  }\n\n  # Create plotly object\n  p <- plot_ly(type=\"scatter\", mode=\"lines\")\n  # Populate gantt chart\n  for(i in 1:(nrow(df) - 1)){\n    p <- add_trace(p,\n                   x = c(df$start_date[i], df$start_date[i] + df$duration[i]),  # x0, x1\n                   y = c(i, i),  # y0, y1\n                   line = list(color = df$color[i], width = 20),\n                   showlegend = F,\n                   hoverinfo = \"text\",\n\n                   # Create custom hover text\n\n                   text = paste(\"Task: \", df$name[i], \"<br>\",\n                                \"Duration: \", df$duration[i], \"days<br>\")\n    )\n  }\n\n  return(p)\n}\n\n\n\n# Main Method Code --------------------------------------------------------\n\n#\n# data <- as.data.frame(read.csv(\"Book1.csv\", header = FALSE))\n#\n# all_tasks <- apply(data, 1, read_func)\n# ids <- lapply(data[,1], to_id)\n# invisible(lapply(all_tasks, get_successor, full_tasks = all_tasks))\n#\n#\n# # Create hash map for the tasks\n# map <- hash(keys = c(ids), values = all_tasks)\n#\n# walk_ahead(all_tasks, map)\n# walk_back(all_tasks, map)\n# res <- critical_path(all_tasks)\n# df <- to_data_frame(all_tasks)\n# gantt(df)\n",
    "created" : 1500850654973.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1523707680",
    "id" : "10473BB7",
    "lastKnownWriteTime" : 1500851196,
    "last_content_update" : 1500851196649,
    "path" : "C:/Users/Student/Box Sync/R Critical Path/critical_path_OO.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}