model_1$coefficients
set.seed(123)
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
plot(x,y, pch=20, cex=0.3)
model_1 <- lm(y ~ x)
model_1$coefficients
pred <- predict.lm(model_1, data.frame(x = c(18)))
pred
ssres <- sst - (4.044594)*sxy
msres <- ssres/length(x)-2)
msres <- ssres/(length(x)-2)
msres
x <- read.table("teamassign01data.txt")[,1]
x
model_simul <- lm(y ~ x)
intercept = vector(1000)
slope = vector(1000)
for(i in 1:1000){
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
model_simul <- lm(y ~ x)
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
}
intercept = vector(mode="double", length = 1000)
slope = vector(mode="double", length = 1000)
for(i in 1:1000){
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
model_simul <- lm(y ~ x)
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
}
mean_b0 <- mean(intercept)
var_b0 <- var(intercept)
mean_b1 <- mean(slope)
var_b1 <- var(slope)
var(x)
sqrt(var(x))
mean_b0
var_b0
mean_b1
var_b1
intercept = vector(mode="double", length = 1000)
slope = vector(mode="double", length = 1000)
for(i in 1:1000){
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
model_simul <- lm(y ~ x)
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
}
mean_b0 <- mean(intercept)
var_b0 <- var(intercept)
mean_b0
var_b0
mean_b1 <- mean(slope)
var_b1 <- var(slope)
mean_b1
var_b1
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
model_simul <- lm(y ~ x)
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
n <- length(x)
b_0 <- model_simul$coefficients[1]
sxx <- sum(x^2) - sum(x)^2/n
sxy <- sum(y * x) - sum(y)*sum(x)/n
sst <- sum(y^2) - sum(y)^2/n
ssres <- sst - b_0*sxy
sum(model_simul$residuals^2)
x <- read.table("teamassign01data.txt")[,1]
setwd("C:/Users/Student/Documents/Fall 2017/STAT/Team HW/1/")
x <- read.table("teamassign01data.txt")[,1]
n <- length(x)
b_0 <- model_simul$coefficients[1]
sxx <- sum(x^2) - sum(x)^2/n
sxy <- sum(y * x) - sum(y)*sum(x)/n
sst <- sum(y^2) - sum(y)^2/n
ssres <- sst - b_0*sxy
ssres
sxy
b_0
b_1 <- model_simul$coefficients[2]
sxx <- sum(x^2) - sum(x)^2/n
sxy <- sum(y * x) - sum(y)*sum(x)/n
sst <- sum(y^2) - sum(y)^2/n
ssres <- sst - b_1*sxy
t_crit <- qt(0.975, n - 2)
se <- sqrt(msres/sxx)
lower <- b_1 - t*se
b1_conf <- vector(mode="logical", length = 1000)
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
n <- length(x)
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
sxx <- sum(x^2) - sum(x)^2/n
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
t_crit <- qt(0.975, n - 2)
se <- sqrt(msres/sxx)
lower <- b_1 - t*se
upper <- b_1 + t*se
b1_conf[i] <- (4 > lower && 4 < upper)
}
sum(b1_conf)
x_bar <- mean(x)
n <- length(x)
sxx <- sum(x^2) - sum(x)^2/n
t_crit <- qt(0.975, n - 2)
x_bar <- mean(x)
n <- length(x)
sxx <- sum(x^2) - sum(x)^2/n
t_crit <- qt(0.975, n - 2)
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se
upper <- b_1 + t_crit*se
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se <- sqrt(msres(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se
upper <- b_0 + t_Crit * se
b0_conf[i] <- (25 > lower && 25 < upper)
}
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se
upper <- b_1 + t_crit*se
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se
upper <- b_0 + t_Crit * se
b0_conf[i] <- (25 > lower && 25 < upper)
}
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se
upper <- b_1 + t_crit*se
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se
upper <- b_0 + t_crit * se
b0_conf[i] <- (25 > lower && 25 < upper)
}
b0_conf <- vector(mode="logical", length = 1000)
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se
upper <- b_1 + t_crit*se
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se
upper <- b_0 + t_crit * se
b0_conf[i] <- (25 > lower && 25 < upper)
}
sum(b1_conf)
sum(b0_conf)
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se_b1 <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se_b1
upper <- b_1 + t_crit*se_b1
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se_b0 <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se_b0
upper <- b_0 + t_crit * se_b0
b0_conf[i] <- (25 > lower && 25 < upper)
# Hypothesis test for b_1
t_hat <- (b_1 - 4)/se_b1
hypothesis_test[i] <- abs(t_hat) > t_crit
}
hypothesis_test <- vector(mode="logical", length = 1000)
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se_b1 <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se_b1
upper <- b_1 + t_crit*se_b1
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se_b0 <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se_b0
upper <- b_0 + t_crit * se_b0
b0_conf[i] <- (25 > lower && 25 < upper)
# Hypothesis test for b_1
t_hat <- (b_1 - 4)/se_b1
hypothesis_test[i] <- abs(t_hat) > t_crit
}
hypothesis_test
sum(hypothesis_test)
25 + 4 * 18
hypothesis_test <- vector(mode="logical", length = 1000)
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se_b1 <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se_b1
upper <- b_1 + t_crit*se_b1
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se_b0 <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se_b0
upper <- b_0 + t_crit * se_b0
b0_conf[i] <- (25 > lower && 25 < upper)
# Hypothesis test for b_1
t_hat <- (b_1 - 4)/se_b1
hypothesis_test[i] <- abs(t_hat) > t_crit
# Mean value for x = 18
pred <- predict.lm(model_simul, data.frame(x = 18))
se_pred <- sqrt(msres(1/n + (18 - x_bar)^2/sxx))
lower <- pred - t_crit * se_pred
upper <- pred + t_crit * se_pred
mean_interval[i] <- (97 > lower && 97 < upper)
}
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se_b1 <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se_b1
upper <- b_1 + t_crit*se_b1
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se_b0 <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se_b0
upper <- b_0 + t_crit * se_b0
b0_conf[i] <- (25 > lower && 25 < upper)
# Hypothesis test for b_1
t_hat <- (b_1 - 4)/se_b1
hypothesis_test[i] <- abs(t_hat) > t_crit
# Mean value for x = 18
pred <- predict.lm(model_simul, data.frame(x = 18))
se_pred <- sqrt(msres*(1/n + (18 - x_bar)^2/sxx))
lower <- pred - t_crit * se_pred
upper <- pred + t_crit * se_pred
mean_interval[i] <- (97 > lower && 97 < upper)
}
mean_invertal <- vector(mode="logical", length = 1000)
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se_b1 <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se_b1
upper <- b_1 + t_crit*se_b1
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se_b0 <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se_b0
upper <- b_0 + t_crit * se_b0
b0_conf[i] <- (25 > lower && 25 < upper)
# Hypothesis test for b_1
t_hat <- (b_1 - 4)/se_b1
hypothesis_test[i] <- abs(t_hat) > t_crit
# Mean value for x = 18
pred <- predict.lm(model_simul, data.frame(x = 18))
se_pred <- sqrt(msres*(1/n + (18 - x_bar)^2/sxx))
lower <- pred - t_crit * se_pred
upper <- pred + t_crit * se_pred
mean_interval[i] <- (97 > lower && 97 < upper)
}
mean_interval <- vector(mode="logical", length = 1000)
for(i in 1:1000){
# Make a new set of y-values
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
# Make a new model
model_simul <- lm(y ~ x)
# Add the coefficients to our vectors
intercept[i] <- model_simul$coefficients[1]
slope[i] <- model_simul$coefficients[2]
# Get C.I for B_1
b_1 <- model_simul$coefficients[2]
ssres <-sum(model_simul$residuals^2)
msres <- ssres/(n-2)
se_b1 <- sqrt(msres/sxx)
lower <- b_1 - t_crit*se_b1
upper <- b_1 + t_crit*se_b1
b1_conf[i] <- (4 > lower && 4 < upper)
# Now for b_0
b_0 <- model_simul$coefficients[1]
se_b0 <- sqrt(msres*(1/n + (x_bar^2)/sxx))
lower <- b_0 - t_crit * se_b0
upper <- b_0 + t_crit * se_b0
b0_conf[i] <- (25 > lower && 25 < upper)
# Hypothesis test for b_1
t_hat <- (b_1 - 4)/se_b1
hypothesis_test[i] <- abs(t_hat) > t_crit
# Mean value for x = 18
pred <- predict.lm(model_simul, data.frame(x = 18))
se_pred <- sqrt(msres*(1/n + (18 - x_bar)^2/sxx))
lower <- pred - t_crit * se_pred
upper <- pred + t_crit * se_pred
mean_interval[i] <- (97 > lower && 97 < upper)
}
sum(mean_interval)
rm(mean_invertal)
library(projmanr)
gantt(taskdata1)
gantt(taskdata1, start_date = Sys.Date() + 30)
gantt(taskdata1, start_date = Sys.Date() + 30)
critical_path(taskdata1, Sys.Date() + 30)
critical_path(taskdata1, start_date = Sys.Date() + 30)
critical_path(taskdata1, start_date = "10/10/19")
critical_path(taskdata1, T, start_date = "10/10/19")
critical_path(taskdata1, T, start_date = Sys.Date() + 30)
library(projmanr)
critical_path(taskdata1, T, start_date = Sys.Date() + 30)
critical_path(taskdata1, T, start_date = "2017-10-10")
gantt(taskdata1, start_date = "2017-10-10")
gantt(taskdata1, start_date = as.Date("2017-10-10"))
critical_path(testdata1)
library(projmanr)
library(projmanr)
taskdata1
critical_path(testdata1)
critical_path(taskdata1)
library(projmanr)
critical_path(taskdata2)
library(projmanr)
critical_path(taskdata2)
gantt(taskdata1, "10/10/2019")
library(readxl)
library(dplyr)
setwd("C:/Users/Student/Documents/Fall 2017/STAT/Homeworks/1/")
p2.1 <- read_xls("data-table-B1.xls")
model2.1 <- lm(y ~ x8, p2.1)
# Gives model equation y = 21.788251 - 0.007025*x8
# b)
summary(model2.1)
# The returned p-value on the coefficient for x8 is 7.38e-06 meaning
# our coefficient is different from 0, so our model is significant
# c)
b1 <- -0.007025
t <- qt(0.975, nrow(p2.1) - 2)
sxx <- sum(p2.1$x8^2) - sum(p2.1$x8)^2/nrow(p2.1)
sxy <- sum(p2.1$y * p2.1$x8) - sum(p2.1$y)*sum(p2.1$x8)/nrow(p2.1)
sst <- sum(p2.1$y^2) - sum(p2.1$y)^2/nrow(p2.1)
ssres <- sst - (-0.0070251)*sxy
msres <- ssres/(nrow(p2.1)-2)
se <- sqrt(msres/sxx)
lower <- b1 - t*se
upper <- b1 + t*se
lower
upper
# The 95% on the slope is (-0.009614247, -0.004435753)
# d)
# From above:
r_squared <- 1 - (ssres/sst)
r_squared
# Gives: 0.5446843
# We could also look at the output from the summary function to get
# the same result.
# e)
# Filter the data
under_2000 <- filter(p2.1, x8 <= 2000)
# Generate the model
model2.1.2 <- lm(y ~ x8, under_2000)
summary(model2.1.2)
limit_2000 <- p2.1
limit_2000[x8 >= 2000]$x8 <- 2000
limit_2000[x8 >= 2000, ]$x8 <- 2000
limit_2000
limit_2000[x8 >= 2000, ]
limit_2000[limit_2000$x8 >= 2000, ]$x8 <- 2000
View(limit_2000)
View(limit_2000)
View(p2.1)
View(under_2000)
View(under_2000)
View(p2.1)
model2.1.2 <- lm(y ~ x8, limit_2000)
x_bar <- mean(limit_2000$x8)
x_bar
predict.lm(model2.1.2, x8 = c(x_bar))
predict.lm(model2.1.2, data.frame(x8 = c(x_bar)))
setwd("C:/Users/Student/Documents/Fall 2017/Data Mining/Kaggle/sys6018-competition-house-prices/")
train <- read.csv("train.csv")
train
train <- read_csv("train.csv")
library(tidyverse)
setwd("C:/Users/Student/Documents/Fall 2017/Data Mining/Kaggle/sys6018-competition-house-prices/")
train <- read_csv("train.csv")
spec(train)
getwd()
setwd("C:/Users/Student/Documents/Fall 2017/STAT/Team HW/1/")
x <- read.table("teamassign01data.txt")[,1]
x
y <- 25 + 4*x + rnorm(100, mean=0, sd = 12)
set.seed(123)
plot(x,y, pch=20, cex=0.3)
model_1 <- lm(y ~ x)
model_1$coefficients
pred <- predict.lm(model_1, data.frame(x = c(18)))
pred
sxx <- sum(x^2) - sum(x^2)/length(x)
sum((x - mean(x))^2)
x
x - mean(x)
l <- x - mean(x)
sum(l^2)
sxx <- sum(x^2) - sum(x)^2/length(x)
sxy <- sum(y * x) - sum(y)*sum(x)/length(x)
sst <- sum(y^2) - sum(y)^2/length(x)
ssres <- sst - (4.044594)*sxy
msres <- ssres/(length(x)-2)
msres
